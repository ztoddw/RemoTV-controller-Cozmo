# Sample Configuration file for the RemoTV python controller
# Global robot variables

[robot]
# This is your username on the remotv site. This is the user that is allowed
# to issue commands via chat 
owner=RoboBobo

# Your robots API key. The site will provide you with this when you create a 
# new robot.
robot_key=
# The name of the channel you want the robot to join. This is optional. If the
# named channel cannot be found, the robot will join the first channel.
channel=CozBot

# Motor controller type for your robot. Current valid types are serial_board,
# motor_hat, gopigo2, gopigo3, l298n, motozero, pololu, adafruit_pwm, owi_arm,
# diddyborg, megapi_board or none.
type=cozmo

# Only used for motor_hat and mdd10
turn_delay=0.4
straight_delay=0.5

[camera]
# Disable video
no_camera=false

# Disable mic
no_mic=false
        #tw 3/3/23- updated ffmpeg.py so mic_off can be configed here or thru .audio start/stop/restart commands
        #  This tells if the audio (mic) is turned on when a command is given.
        #  If '.audio stop' is executed, this turns to true, and audio will stay off until '.audio start' is executed.
mic_off=false

# Specify the audio / video encoder you are using here. Currently ffmpeg,
# ffmpeg-arecord and none. Note: Only robots with Raspberry Pi's or other Linux
# based controllers  should use ffmpeg-arecord. All others should use ffmpeg or 
# none.

type=ffmpeg
#type=cozmo_vid

# X and Y resolution to capture video at
        # tw 2/21/23 this is the actual resolution, 
#x_res = 640
#y_res = 480
        # but since vid is freezing sometimes, let's try smaller- didn't help
#x_res = 400
#y_res = 300


        #what came:
#x_res = 768
#y_res = 432

	#tw 3/9/23 these actually don't get used for "video_input_format=mjpeg" or for "video_input_format="  (no format)
	#   which is the case for the ip cam i'm using now.
	#   3/10 but they're still important for overlay position calculations.
#x_res1=320
#y_res1=240

#x_res2=320
#y_res2=240
		# try making them the same so we don't have to refresh page?...
x_res1=1280
y_res1=720

x_res2=1280
y_res2=720

x_res3=640
y_res3=480

x_res4=640
y_res4=480

x_res5=320
y_res5=240

x_res6=320
y_res6=240

x_res7=320
y_res7=240

x_res8=640
y_res8=480

x_res9=640
y_res9=480

x_res10=1280
y_res10=720

x_res11=1280
y_res11=720

x_res12=1280
y_res12=720

x_res13=1280
y_res13=720


# Video device
#camera_device = /dev/video0

# windows device example
        #what it came with
#camera_device = video="USB Webcam"

#camera_device = video="DroidCam Source 3"

        # tw 3/3/23 overlay was working- now it's back to causing the main stream to lag for some reason...
        #       3/3 now it's working again with no lag. just needed to run kitty command to get the flow going...
        #       but then the lag came back. 
        # tw 3/4/23 re-enabled as new camera_device2, adding ".video start 2" command in ffmpeg.py to switch to use it

#camera_device1=video="Integrated Camera" -stream_loop "-1" -f image2 -framerate 5 -i overlay.png -filter_complex 'overlay'
# -thread_queue_size 5096       #overlay changes don't stay caught up with this?

#camera_device2=video="Integrated Camera"

	# switch over to IP cam- it is testing okay now...
	# resolutions from ip cam live video page (IE mode plug in):
	# 480p-   should mean 640x480 - but it is actually 320x240 when i use the streaming link after setting to this?
	#    and seems to be the only one that doesn't lag or freeze up way too much. (still does a little)
	# 640p-   no such thing?
	# 720p-   should mean 1280x720
	# 1280p-  should mean 1920x1080 -not sure what these really are.
	
	# found "resolution=" example online, and thought it was doing something- but it's not.
	# It just always gives the resolution I last set it to on the ip cam's live video page.
	
#camera_device1="http://admin:@192.168.1.21/videostream.asf?user=admin&pwd=&resolution=640*480" -stream_loop "-1" -f image2 -framerate 5 -i overlay.png -filter_complex 'overlay'
#camera_device2="http://admin:@192.168.1.21/videostream.asf?user=admin&pwd=&resolution=640*480"

camera_device1="http://admin:@192.168.1.21/videostream.asf?user=admin&pwd=" -stream_loop "-1" -f image2 -framerate 5 -i overlay.png -filter_complex 'overlay'
camera_device2="http://admin:@192.168.1.21/videostream.asf?user=admin&pwd="

	# 320x240 is not a good resolution. Try using image snapshots instead, and pasting into overlay.
	# from 640p video page: http://192.168.1.21/video/snapshot.asp?cam_idx=0&img_size=41943520 
	# from 480p video page: http://192.168.1.21/video/snapshot.asp?cam_idx=0&img_size=20971760
	# 	(hardware/cozmo.py will grab the snapshots)

camera_device3="http://admin:@192.168.1.21/videostream.asf?user=admin&pwd=" -stream_loop "-1" -f image2 -framerate 5 -i overlay.png -filter_complex 'overlay'
camera_device4="http://admin:@192.168.1.21/videostream.asf?user=admin&pwd="

camera_device5="http://admin:@192.168.1.21/videostream.asf?user=admin&pwd=" -stream_loop "-1" -f image2 -framerate 5 -i overlay.png -filter_complex 'overlay'
camera_device6="http://admin:@192.168.1.21/videostream.asf?user=admin&pwd="

	#not sure yet if I can make cozmo's cam piping to ffmpeg as one of these options
	# no- still can't get it to work for piping directly to ffmpeg
#camera_device7=coz

	# Another option: use lavfi library for first input and use overlay for image based stream.
	#  see https://stackoverflow.com/questions/22710099/ffmpeg-create-blank-screen-with-text-video
	#  lagging- maybe cuz i took out threads=4?

camera_device7="color=size=320x240:rate=20" -stream_loop "-1" -f image2 -framerate 5 -i overlay.png -filter_complex 'overlay'

	# Using ManyCam as virtual camera works better sometimes, to capture the ip cam app on desktop, which
	# displays the video stream better (usually) than using the URL to stream.
	#  Includes filter to zoom in on the stream, since ManyCam doesn't fill the whole frame on a desktop capture.
	#  3/27/23 Made this the default again because ManyCam stopped working, then after restarting it 
	#   didn't fill the whole frame again, even for the integrated webcam.
camera_device8=video="ManyCam Virtual Webcam" -stream_loop "-1" -f image2 -framerate 5 -i overlay.png -filter_complex "[0:v]scale=2*iw:-1, crop=iw/2:ih/2[a]; [a] [1] overlay [out]" -map "[out]" 
# -thread_queue_size 5096       #do overlay changes not stay caught up when we use this?

camera_device9=video="ManyCam Virtual Webcam" -vf "scale=2*iw:-1, crop=iw/2:ih/2[a]" 

	# To use ManyCam to show integrated webcam, or something else, leave out the "zoom in" filter.
	#  (going back to integrated webcam because the ip cam desktop app is also unreliable sometimes)
camera_device10=video="ManyCam Virtual Webcam" -stream_loop "-1" -f image2 -framerate 5 -i overlay.png -filter_complex 'overlay'
# -thread_queue_size 5096       #do overlay changes not stay caught up when we use this? 3/22 that's correct.
	#3/22/23 trying adding it back in, since i'm getting error of :
	# Thread message queue blocking; consider raising the thread_queue_size option (current value: 8)
	
camera_device11=video="ManyCam Virtual Webcam" 

	# Also put integrated cam directly back into the mix, just in case there are issues with ManyCam.
camera_device12=video="Integrated Camera" -stream_loop "-1" -f image2 -framerate 5 -i overlay.png -filter_complex 'overlay'

camera_device13=video="Integrated Camera"


# Audio device. Generally the hardware number is preferred, but if you have
# issues with that changing, using the device name will probably help.
# otherwise, leave it blank.
mic_num=1,0
#mic_device=

#windows
        #what it came with
#mic_device = audio="Microphone (Logitech G533 Gaming Headset)"

#mic_device = audio="Microphone (DroidCam Virtual Audio)"
mic_device=audio="Microphone Array (Synaptics Audio)"


[ffmpeg]
# Combined ffmpeg options for audio and video
#ffmpeg_location = /usr/bin/ffmpeg
# Windows path example
ffmpeg_location=c://ffmpeg//bin//ffmpeg.exe

# Path to v4l2-ctl
v4l2-ctl_location=/usr/bin/v4l2-ctl

# Audio codec ffmpeg should use, only mp2 is supported but twolame will work 
# when compiled in to ffmpeg.
audio_codec=mp2

# Audio channels, 1 for mono 2 for stereo.
audio_channels=1

# Bitrate for the audio stream in kilobytes
	# tw 3/9/23- changed 32 to 25, trying to get audio to not lag- gives error
audio_bitrate=32

# Sample rate fot the audio stream in hertz
audio_sample_rate=44100

# Video codec ffmpeg should use. Currently only mpeg1video is supported.
video_codec=mpeg1video

# Bitrate for the video stream in kilobytes
        # tw 2/20/23- changed from 350 to 250?  # 3/3/23- changed to 120
video_bitrate=200

# Video filter options. To rotate the video 180 degree, uncomment this line
#video_filter = transpose=2,transpose=2
	#stretch out the screen capture using manycam- only w/ simple filter (not filter_complex)
#video_filter="scale=2*iw:-1, crop=iw/2:ih/2"


# Optional additional ffmpeg options for audio input and output. leave
# audio_input_device blank if using alsa for audio format

# windows
audio_input_format=dshow
audio_input_options=-audio_buffer_size 250

#audio_input_format = alsa
#audio_input_options =
audio_output_options=-nostats

# Optional additional ffmpeg options for video input and output
#video_input_format = v4l2


# windows

	# for integrated cam
#video_input_format=dshow
#video_input_options=-thread_queue_size 5096

	# for ip cam- still need thread_queue_size? don't think so..
	#  Update ffmpeg.py so it won't send -r or -framerate for a blank input format.
	#  The stream seems to work better without specifying those.
video_input_format1=
video_input_format2=
video_input_format3=
video_input_format4=
video_input_format5=
video_input_format6=
video_input_format7=lavfi
video_input_format8=dshow -thread_queue_size 5096
video_input_format9=dshow -thread_queue_size 5096
video_input_format10=dshow -thread_queue_size 5096
video_input_format11=dshow -thread_queue_size 5096
video_input_format12=dshow -thread_queue_size 5096
video_input_format13=dshow -thread_queue_size 5096

	# set loglevel fatal because so it doesn't flood screen with errors due to not finding key frame right away
video_input_options1=-loglevel fatal
video_input_options2=-loglevel fatal
video_input_options3=-loglevel fatal
video_input_options4=-loglevel fatal
video_input_options5=-loglevel fatal
video_input_options6=-loglevel fatal
video_input_options7=
video_input_options8= -rtbufsize 4000000
video_input_options9= -rtbufsize 4000000
video_input_options10= -rtbufsize 4000000
video_input_options11= -rtbufsize 4000000
video_input_options12=
video_input_options13=

	# I think I changed threads to 4 to work better for overlay...
video_output_options1=-r 20 -nostats -threads 4 -video_size 1280x720
video_output_options2=-r 20 -nostats -threads 4 -video_size 1280x720
video_output_options3=-r 20 -nostats -threads 4 -video_size 640x480
video_output_options4=-r 20 -nostats -threads 4 -video_size 640x480
video_output_options5=-r 20 -nostats -threads 4 -video_size 320x240
video_output_options6=-r 20 -nostats -threads 4 -video_size 320x240
video_output_options7=-r 20 -nostats 
video_output_options8=-r 20 -nostats -threads 4 -video_size 640x480
video_output_options9=-r 20 -nostats -threads 4 -video_size 640x480
video_output_options10=-r 20 -nostats -threads 4 -video_size 1280x720
video_output_options11=-r 20 -nostats -threads 4 -video_size 1280x720
video_output_options12=-r 20 -nostats -threads 4 -video_size 1280x720
video_output_options13=-r 20 -nostats -threads 4 -video_size 1280x720

#video_output_options = -threads 2

StartingVideoOption = 10


# frame rate option. DO NOT CHANGE THIS unless you know what you are doing.
# it's not really about changing the framerate from the camera as it is
# changing the framerate of the video being sent to the server. The video
# encoder gets grumpy if this is set wrong.
        # 2/19/23 tw- this was commented out- re-activated, changed from 25 to 20, maybe helped?
        # 3/3/23 tw- getting error trying to use 25 or 20 "could not set option". 30 works... 
        #       tried leaving disbled again- get same error. thought it worked before?...
        # 3/9/23 tw- switch to ip cam- try 25 again. laggy. try 20, still laggy with medium to higher resolution
        # 3/10/23 tw- just realized this is only used for input on ffmpeg cmd line-
        #	let's try framerate=10, and put '-r 25' in output options? but that makes the video lag a lot.
#video_framerate=20


[ffmpeg-arecord]
arecord_path=/usr/bin/arecord
arecord_format=S16_LE

[tts]
# Specify the TTS engine you are using here. Current valid types are espeak,
# festival and none
type=cozmo_tts

# TTS volume
tts_volume=80

# Allow anonymous users chat messages to be broadcast over TTS. Set to false to
# block them.
anon_tts=true

# Block URLS from being broadcast over TTS. Set to true to block them.
filter_url_tts=true

# Enable extended chat commands
ext_chat=True

# ALSA HW number for your playback device
# For Tellys this is 2. 
# If you have trouble with the playback device changing hardware numbers,
# use the audio device name. Otherwise, leave it blank.
speaker_num=1,0
speaker_device=

# What the robot should say when it is ready to receive commands.
# No need to encapsulate in quotes.
boot_message=ok

# Announce the IPv4 address. This is useful for debugging
# especially in new environments.
announce_ip=False

# Announces when the cloned repo is out of date and by how many commits.
annouce_out_of_date=False

# Enable delayed TTS, this allows a window for  moderators to remove messages
# before they get passed to TTS. Messenger must be enabled for this to function.
delay_tts=false
delay=10


[espeak]
# espeak specific TTS settings go here

# voice gender, male or female
male=True
 
# voice number
voice_number=1

# espeak path. Option setting, for when espeak is not installed in the expected
# place.
#espeak_path=
# Windows path
#espeak_path=C://Program Files (x86)//eSpeak//command_line//

[festival]
# Festival specific TTS settings go here

[pico]
voice=en-US

[polly]
# polly requires you to have an amazon aws account and have setup a IAM user
# with access to polly
robot_voice=Matthew
owner_voice=Russell
random_voices=true
access_key=
secrets_key=
region_name=us-east-1

[google_cloud]
ssml_enabled=False
key_file=
voice=en-US-Wavenet-A
#pitch can be between -20.0 and 20.0, 0.0 is default pitch for chosen voice
voice_pitch=0.0
#speaking rate can be between 0.25 and 4.0, 1.0 is default rate
voice_speaking_rate=1.0

# All the settings below only work if random_voices is enabled
random_voices=False
# Enable standard_voices to disable the use of Wavenet voices.
standard_voices=False
# A comma separated list of approved language codes.
strict_languages=en-US,en-GB,en-AU


[cozmo]
forward_speed=75
turn_speed=50
                # volume was 100
volume=30
charge_high=4.5
charge_low=3.6
send_online_status=1
stay_on_dock=0
annotated=0
colour=true

    # Used for calibration: (can set these from remo.tv, using ".cal",
    #	while using the bot, and save them back to here, using ".save")
cozX1=-489
cozY1=-1734
cozX2=-610
cozY2=-1770
cozScreenX1=640
cozScreenY1=360
cozScreenX2=440
cozScreenY2=500


[adafruit_pwm]
address=0x40
pwm_freq=60
more_debug=False

[owi_arm]

[serial]
serial_device=/dev/ttyACM0
#serial_device=COM3 # Windows example serial device

#Option value, that will search for a serial port with a specific hardware
#name or id. Overwrites serial_device with the correct value if found.
#serial_name=Arduino

baud_rate=9600

[motor_hat]
day_speed=255
night_speed=255
turning_speed=250
forward=[-1,1,-1,1]
left=[1,1,1,1]

# Enable charging behaviours 
slow_for_low_battery=false

# Charging stuff
charge_hours=3.0
discharge_hours=8.0
chargeCheckInterval=5
chargeIONumber=17

[gopigo2]
drive_time=0.35
turn_time=0.15

[gopigo3]
drive_time=0.35
turn_time=0.15

# Settings specific to the l298n dual h-bridge motor driver
[l298n]
StepPinForward=12,16
StepPinBackward=11,15
StepPinLeft=15,12
StepPinRight=11,16
# Change sleeptime to adjust driving speed
# Change rotatetimes to adjust the turning. Will be multiplied with sleeptime.
# IMPORTANT NOTE: How this is handled has changed, your values may no longer be
# correct if using settings from an older controller.
sleeptime=0.2
rotatetimes=5


[motozero]
MotorDelay=0.3
# Motor1 is back left
# Motor1A is reverse
# Motor1B is forward
Motor1A=24
Motor1B=27
Motor1Enable=5

# Motor2 is back right
# Motor2A is reverse
# Motor2B is forward
Motor2A=6
Motor2B=22
Motor2Enable=17

# Motor3 is ?
# Motor3A is reverse
# Motor3B is forward
Motor3A=23
Motor3B=16
Motor3Enable=12

# Motor4 is ?
# Motor4A is reverse
# Motor4B is forward
Motor4A=13
Motor4B=18
Motor4Enable=25

[pololu]
drivingSpeed=90

[mc33926]
drivingSpeed=180

[max7219]
ledrotate=180

[thunderborg]
# maximum is 1.0, minimum is 0.0
left_motor_max=1.0
right_motor_max=1.0
sleep_time=0.4

[megapi_board]
# Default time per message
motor_time=0.2
# Speed of drive motors (0 to 255)
driving_speed=150
# Speed of arm drive (0 to 255)
arm_speed=50
# Speed of grabber (0 to 255)
grabber_speed=50

# Motor controller ports
left_track_port=2
right_track_port=3
grabber_port=4
arm_port=1

[mqtt_pub]
# If you are using MQTT you need to supply the host IP address, port, and Topic
# host should be the IP address where the MQTT broker is running (i.e. 192.168.xx.xx)
# the port typically is 1883 for MQTT
# the topic is your choice, but it needs to match with the robot subscribers
host=YourBrokerID
port=1883
topic=LR/command

#username for MQTT server. 
#Not needed unless the server is accessible from outside the local network
#user = remo
#password for user on MQTT server. This can be blank. This also sets MQTT to try to use ssl
#if using SSL, the port should be 8883
#pass = hunter2

# Logging settings
[logging]
# Name of the log file to be written to
log_file=controller.log
# log levels in order of importance are CRITICAL, ERROR, WARNING, INFO, DEBUG
        # tw 2/16/23 changed file_level from warning to info
file_level=INFO
console_level=INFO
# log size is in bytes
max_size=100000
# Number of old log files to hang onto.
num_backup=2

# This is mostly stuff you probably shouldn't be touching
[misc]
# host server to connect to
server=remo.tv
# API version is the version of the API.
api_version=dev
# video server to connect to so you can use local websocket and remote video server
        # 2/17/23 tw removed :1567 after remo.tv, since someone said it's not needed- didn't work without it tho.
video_server=remo.tv:1567
# Enable the controller to look for custom handler code
custom_hardware=True
# Enable the controller to look for custom TTS handler code
custom_tts=True
# Enable the controller to look for custom chat handler code
custom_chat=True
# Enable the controller to look for custom video handler code
custom_video=True
# Enable the watchdog timer, if you are not using a raspberry pi, you won't want
# this.
watchdog=False
# Enable async handling of commands, your handler will either need to be able to
# function asyncronously or it will need it's own blocking.
enable_async=False

# Periodically check internet connection status, and report failure / connect
# over tts
check_internet=True
check_freq=120
